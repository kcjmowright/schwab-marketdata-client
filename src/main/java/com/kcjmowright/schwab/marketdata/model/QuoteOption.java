/*
 * Market Data
 * Trader API - Market data
 *
 * OpenAPI spec version: 1.0.0
 * Contact: TraderAPI@Schwab.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.kcjmowright.schwab.marketdata.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * Quote data of Option security
 */
@Schema(description = "Quote data of Option security")


public class QuoteOption {
  @JsonProperty("52WeekHigh")
  private Double _52WeekHigh = null;

  @JsonProperty("52WeekLow")
  private Double _52WeekLow = null;

  @JsonProperty("askPrice")
  private Double askPrice = null;

  @JsonProperty("askSize")
  private Integer askSize = null;

  @JsonProperty("bidPrice")
  private Double bidPrice = null;

  @JsonProperty("bidSize")
  private Integer bidSize = null;

  @JsonProperty("closePrice")
  private Double closePrice = null;

  @JsonProperty("delta")
  private Double delta = null;

  @JsonProperty("gamma")
  private Double gamma = null;

  @JsonProperty("highPrice")
  private Double highPrice = null;

  @JsonProperty("indAskPrice")
  private Double indAskPrice = null;

  @JsonProperty("indBidPrice")
  private Double indBidPrice = null;

  @JsonProperty("indQuoteTime")
  private Long indQuoteTime = null;

  @JsonProperty("impliedYield")
  private Double impliedYield = null;

  @JsonProperty("lastPrice")
  private Double lastPrice = null;

  @JsonProperty("lastSize")
  private Integer lastSize = null;

  @JsonProperty("lowPrice")
  private Double lowPrice = null;

  @JsonProperty("mark")
  private Double mark = null;

  @JsonProperty("markChange")
  private Double markChange = null;

  @JsonProperty("markPercentChange")
  private Double markPercentChange = null;

  @JsonProperty("moneyIntrinsicValue")
  private Double moneyIntrinsicValue = null;

  @JsonProperty("netChange")
  private Double netChange = null;

  @JsonProperty("netPercentChange")
  private Double netPercentChange = null;

  @JsonProperty("openInterest")
  private Double openInterest = null;

  @JsonProperty("openPrice")
  private Double openPrice = null;

  @JsonProperty("quoteTime")
  private Long quoteTime = null;

  @JsonProperty("rho")
  private Double rho = null;

  @JsonProperty("securityStatus")
  private String securityStatus = null;

  @JsonProperty("theoreticalOptionValue")
  private Double theoreticalOptionValue = null;

  @JsonProperty("theta")
  private Double theta = null;

  @JsonProperty("timeValue")
  private Double timeValue = null;

  @JsonProperty("totalVolume")
  private Long totalVolume = null;

  @JsonProperty("tradeTime")
  private Long tradeTime = null;

  @JsonProperty("underlyingPrice")
  private Double underlyingPrice = null;

  @JsonProperty("vega")
  private Double vega = null;

  @JsonProperty("volatility")
  private Double volatility = null;

  public QuoteOption _52WeekHigh(Double _52WeekHigh) {
    this._52WeekHigh = _52WeekHigh;
    return this;
  }

   /**
   * Higest price traded in the past 12 months, or 52 weeks
   * @return _52WeekHigh
  **/
  @Schema(example = "145.09", description = "Higest price traded in the past 12 months, or 52 weeks")
  public Double get52WeekHigh() {
    return _52WeekHigh;
  }

  public void set52WeekHigh(Double _52WeekHigh) {
    this._52WeekHigh = _52WeekHigh;
  }

  public QuoteOption _52WeekLow(Double _52WeekLow) {
    this._52WeekLow = _52WeekLow;
    return this;
  }

   /**
   * Lowest price traded in the past 12 months, or 52 weeks
   * @return _52WeekLow
  **/
  @Schema(example = "77.581", description = "Lowest price traded in the past 12 months, or 52 weeks")
  public Double get52WeekLow() {
    return _52WeekLow;
  }

  public void set52WeekLow(Double _52WeekLow) {
    this._52WeekLow = _52WeekLow;
  }

  public QuoteOption askPrice(Double askPrice) {
    this.askPrice = askPrice;
    return this;
  }

   /**
   * Current Best Ask Price
   * @return askPrice
  **/
  @Schema(example = "124.63", description = "Current Best Ask Price")
  public Double getAskPrice() {
    return askPrice;
  }

  public void setAskPrice(Double askPrice) {
    this.askPrice = askPrice;
  }

  public QuoteOption askSize(Integer askSize) {
    this.askSize = askSize;
    return this;
  }

   /**
   * Number of shares for ask
   * @return askSize
  **/
  @Schema(example = "700", description = "Number of shares for ask")
  public Integer getAskSize() {
    return askSize;
  }

  public void setAskSize(Integer askSize) {
    this.askSize = askSize;
  }

  public QuoteOption bidPrice(Double bidPrice) {
    this.bidPrice = bidPrice;
    return this;
  }

   /**
   * Current Best Bid Price
   * @return bidPrice
  **/
  @Schema(example = "124.6", description = "Current Best Bid Price")
  public Double getBidPrice() {
    return bidPrice;
  }

  public void setBidPrice(Double bidPrice) {
    this.bidPrice = bidPrice;
  }

  public QuoteOption bidSize(Integer bidSize) {
    this.bidSize = bidSize;
    return this;
  }

   /**
   * Number of shares for bid
   * @return bidSize
  **/
  @Schema(example = "300", description = "Number of shares for bid")
  public Integer getBidSize() {
    return bidSize;
  }

  public void setBidSize(Integer bidSize) {
    this.bidSize = bidSize;
  }

  public QuoteOption closePrice(Double closePrice) {
    this.closePrice = closePrice;
    return this;
  }

   /**
   * Previous day&#x27;s closing price
   * @return closePrice
  **/
  @Schema(example = "126.27", description = "Previous day's closing price")
  public Double getClosePrice() {
    return closePrice;
  }

  public void setClosePrice(Double closePrice) {
    this.closePrice = closePrice;
  }

  public QuoteOption delta(Double delta) {
    this.delta = delta;
    return this;
  }

   /**
   * Delta Value
   * @return delta
  **/
  @Schema(example = "-0.0407", description = "Delta Value")
  public Double getDelta() {
    return delta;
  }

  public void setDelta(Double delta) {
    this.delta = delta;
  }

  public QuoteOption gamma(Double gamma) {
    this.gamma = gamma;
    return this;
  }

   /**
   * Gamma Value
   * @return gamma
  **/
  @Schema(example = "0.00010", description = "Gamma Value")
  public Double getGamma() {
    return gamma;
  }

  public void setGamma(Double gamma) {
    this.gamma = gamma;
  }

  public QuoteOption highPrice(Double highPrice) {
    this.highPrice = highPrice;
    return this;
  }

   /**
   * Day&#x27;s high trade price
   * @return highPrice
  **/
  @Schema(example = "126.99", description = "Day's high trade price")
  public Double getHighPrice() {
    return highPrice;
  }

  public void setHighPrice(Double highPrice) {
    this.highPrice = highPrice;
  }

  public QuoteOption indAskPrice(Double indAskPrice) {
    this.indAskPrice = indAskPrice;
    return this;
  }

   /**
   * Indicative Ask Price applicable only for Indicative Option Symbols
   * @return indAskPrice
  **/
  @Schema(example = "126.99", description = "Indicative Ask Price applicable only for Indicative Option Symbols")
  public Double getIndAskPrice() {
    return indAskPrice;
  }

  public void setIndAskPrice(Double indAskPrice) {
    this.indAskPrice = indAskPrice;
  }

  public QuoteOption indBidPrice(Double indBidPrice) {
    this.indBidPrice = indBidPrice;
    return this;
  }

   /**
   * Indicative Bid Price applicable only for Indicative Option Symbols
   * @return indBidPrice
  **/
  @Schema(example = "126.99", description = "Indicative Bid Price applicable only for Indicative Option Symbols")
  public Double getIndBidPrice() {
    return indBidPrice;
  }

  public void setIndBidPrice(Double indBidPrice) {
    this.indBidPrice = indBidPrice;
  }

  public QuoteOption indQuoteTime(Long indQuoteTime) {
    this.indQuoteTime = indQuoteTime;
    return this;
  }

   /**
   * Indicative Quote Time in milliseconds since Epoch applicable only for Indicative Option Symbols
   * @return indQuoteTime
  **/
  @Schema(description = "Indicative Quote Time in milliseconds since Epoch applicable only for Indicative Option Symbols")
  public Long getIndQuoteTime() {
    return indQuoteTime;
  }

  public void setIndQuoteTime(Long indQuoteTime) {
    this.indQuoteTime = indQuoteTime;
  }

  public QuoteOption impliedYield(Double impliedYield) {
    this.impliedYield = impliedYield;
    return this;
  }

   /**
   * Implied Yield
   * @return impliedYield
  **/
  @Schema(example = "-0.0067", description = "Implied Yield")
  public Double getImpliedYield() {
    return impliedYield;
  }

  public void setImpliedYield(Double impliedYield) {
    this.impliedYield = impliedYield;
  }

  public QuoteOption lastPrice(Double lastPrice) {
    this.lastPrice = lastPrice;
    return this;
  }

   /**
   * Get lastPrice
   * @return lastPrice
  **/
  @Schema(example = "122.3", description = "")
  public Double getLastPrice() {
    return lastPrice;
  }

  public void setLastPrice(Double lastPrice) {
    this.lastPrice = lastPrice;
  }

  public QuoteOption lastSize(Integer lastSize) {
    this.lastSize = lastSize;
    return this;
  }

   /**
   * Number of shares traded with last trade
   * @return lastSize
  **/
  @Schema(example = "100", description = "Number of shares traded with last trade")
  public Integer getLastSize() {
    return lastSize;
  }

  public void setLastSize(Integer lastSize) {
    this.lastSize = lastSize;
  }

  public QuoteOption lowPrice(Double lowPrice) {
    this.lowPrice = lowPrice;
    return this;
  }

   /**
   * Day&#x27;s low trade price
   * @return lowPrice
  **/
  @Schema(example = "52.74", description = "Day's low trade price")
  public Double getLowPrice() {
    return lowPrice;
  }

  public void setLowPrice(Double lowPrice) {
    this.lowPrice = lowPrice;
  }

  public QuoteOption mark(Double mark) {
    this.mark = mark;
    return this;
  }

   /**
   * Mark price
   * @return mark
  **/
  @Schema(example = "52.93", description = "Mark price")
  public Double getMark() {
    return mark;
  }

  public void setMark(Double mark) {
    this.mark = mark;
  }

  public QuoteOption markChange(Double markChange) {
    this.markChange = markChange;
    return this;
  }

   /**
   * Mark Price change
   * @return markChange
  **/
  @Schema(example = "-0.01", description = "Mark Price change")
  public Double getMarkChange() {
    return markChange;
  }

  public void setMarkChange(Double markChange) {
    this.markChange = markChange;
  }

  public QuoteOption markPercentChange(Double markPercentChange) {
    this.markPercentChange = markPercentChange;
    return this;
  }

   /**
   * Mark Price percent change
   * @return markPercentChange
  **/
  @Schema(example = "-0.0189", description = "Mark Price percent change")
  public Double getMarkPercentChange() {
    return markPercentChange;
  }

  public void setMarkPercentChange(Double markPercentChange) {
    this.markPercentChange = markPercentChange;
  }

  public QuoteOption moneyIntrinsicValue(Double moneyIntrinsicValue) {
    this.moneyIntrinsicValue = moneyIntrinsicValue;
    return this;
  }

   /**
   * Money Intrinsic Value
   * @return moneyIntrinsicValue
  **/
  @Schema(example = "-947.96", description = "Money Intrinsic Value")
  public Double getMoneyIntrinsicValue() {
    return moneyIntrinsicValue;
  }

  public void setMoneyIntrinsicValue(Double moneyIntrinsicValue) {
    this.moneyIntrinsicValue = moneyIntrinsicValue;
  }

  public QuoteOption netChange(Double netChange) {
    this.netChange = netChange;
    return this;
  }

   /**
   * Current Last-Prev Close
   * @return netChange
  **/
  @Schema(example = "-0.04", description = "Current Last-Prev Close")
  public Double getNetChange() {
    return netChange;
  }

  public void setNetChange(Double netChange) {
    this.netChange = netChange;
  }

  public QuoteOption netPercentChange(Double netPercentChange) {
    this.netPercentChange = netPercentChange;
    return this;
  }

   /**
   * Net Percentage Change
   * @return netPercentChange
  **/
  @Schema(example = "-0.0756", description = "Net Percentage Change")
  public Double getNetPercentChange() {
    return netPercentChange;
  }

  public void setNetPercentChange(Double netPercentChange) {
    this.netPercentChange = netPercentChange;
  }

  public QuoteOption openInterest(Double openInterest) {
    this.openInterest = openInterest;
    return this;
  }

   /**
   * Open Interest
   * @return openInterest
  **/
  @Schema(example = "317", description = "Open Interest")
  public Double getOpenInterest() {
    return openInterest;
  }

  public void setOpenInterest(Double openInterest) {
    this.openInterest = openInterest;
  }

  public QuoteOption openPrice(Double openPrice) {
    this.openPrice = openPrice;
    return this;
  }

   /**
   * Price at market open
   * @return openPrice
  **/
  @Schema(example = "52.8", description = "Price at market open")
  public Double getOpenPrice() {
    return openPrice;
  }

  public void setOpenPrice(Double openPrice) {
    this.openPrice = openPrice;
  }

  public QuoteOption quoteTime(Long quoteTime) {
    this.quoteTime = quoteTime;
    return this;
  }

   /**
   * Last quote time in milliseconds since Epoch
   * @return quoteTime
  **/
  @Schema(example = "1621376892336", description = "Last quote time in milliseconds since Epoch")
  public Long getQuoteTime() {
    return quoteTime;
  }

  public void setQuoteTime(Long quoteTime) {
    this.quoteTime = quoteTime;
  }

  public QuoteOption rho(Double rho) {
    this.rho = rho;
    return this;
  }

   /**
   * Rho Value
   * @return rho
  **/
  @Schema(example = "-0.3732", description = "Rho Value")
  public Double getRho() {
    return rho;
  }

  public void setRho(Double rho) {
    this.rho = rho;
  }

  public QuoteOption securityStatus(String securityStatus) {
    this.securityStatus = securityStatus;
    return this;
  }

   /**
   * Status of security
   * @return securityStatus
  **/
  @Schema(example = "Normal", description = "Status of security")
  public String getSecurityStatus() {
    return securityStatus;
  }

  public void setSecurityStatus(String securityStatus) {
    this.securityStatus = securityStatus;
  }

  public QuoteOption theoreticalOptionValue(Double theoreticalOptionValue) {
    this.theoreticalOptionValue = theoreticalOptionValue;
    return this;
  }

   /**
   * Theoretical option Value
   * @return theoreticalOptionValue
  **/
  @Schema(example = "12.275", description = "Theoretical option Value")
  public Double getTheoreticalOptionValue() {
    return theoreticalOptionValue;
  }

  public void setTheoreticalOptionValue(Double theoreticalOptionValue) {
    this.theoreticalOptionValue = theoreticalOptionValue;
  }

  public QuoteOption theta(Double theta) {
    this.theta = theta;
    return this;
  }

   /**
   * Theta Value
   * @return theta
  **/
  @Schema(example = "-0.315", description = "Theta Value")
  public Double getTheta() {
    return theta;
  }

  public void setTheta(Double theta) {
    this.theta = theta;
  }

  public QuoteOption timeValue(Double timeValue) {
    this.timeValue = timeValue;
    return this;
  }

   /**
   * Time Value
   * @return timeValue
  **/
  @Schema(example = "12.22", description = "Time Value")
  public Double getTimeValue() {
    return timeValue;
  }

  public void setTimeValue(Double timeValue) {
    this.timeValue = timeValue;
  }

  public QuoteOption totalVolume(Long totalVolume) {
    this.totalVolume = totalVolume;
    return this;
  }

   /**
   * Aggregated shares traded throughout the day, including pre/post market hours.
   * @return totalVolume
  **/
  @Schema(example = "20171188", description = "Aggregated shares traded throughout the day, including pre/post market hours.")
  public Long getTotalVolume() {
    return totalVolume;
  }

  public void setTotalVolume(Long totalVolume) {
    this.totalVolume = totalVolume;
  }

  public QuoteOption tradeTime(Long tradeTime) {
    this.tradeTime = tradeTime;
    return this;
  }

   /**
   * Last trade time in milliseconds since Epoch
   * @return tradeTime
  **/
  @Schema(example = "1621376731304", description = "Last trade time in milliseconds since Epoch")
  public Long getTradeTime() {
    return tradeTime;
  }

  public void setTradeTime(Long tradeTime) {
    this.tradeTime = tradeTime;
  }

  public QuoteOption underlyingPrice(Double underlyingPrice) {
    this.underlyingPrice = underlyingPrice;
    return this;
  }

   /**
   * Underlying Price
   * @return underlyingPrice
  **/
  @Schema(example = "3247.96", description = "Underlying Price")
  public Double getUnderlyingPrice() {
    return underlyingPrice;
  }

  public void setUnderlyingPrice(Double underlyingPrice) {
    this.underlyingPrice = underlyingPrice;
  }

  public QuoteOption vega(Double vega) {
    this.vega = vega;
    return this;
  }

   /**
   * Vega Value
   * @return vega
  **/
  @Schema(example = "1.4455", description = "Vega Value")
  public Double getVega() {
    return vega;
  }

  public void setVega(Double vega) {
    this.vega = vega;
  }

  public QuoteOption volatility(Double volatility) {
    this.volatility = volatility;
    return this;
  }

   /**
   * Option Risk/Volatility Measurement
   * @return volatility
  **/
  @Schema(example = "0.0094", description = "Option Risk/Volatility Measurement")
  public Double getVolatility() {
    return volatility;
  }

  public void setVolatility(Double volatility) {
    this.volatility = volatility;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuoteOption quoteOption = (QuoteOption) o;
    return Objects.equals(this._52WeekHigh, quoteOption._52WeekHigh) &&
        Objects.equals(this._52WeekLow, quoteOption._52WeekLow) &&
        Objects.equals(this.askPrice, quoteOption.askPrice) &&
        Objects.equals(this.askSize, quoteOption.askSize) &&
        Objects.equals(this.bidPrice, quoteOption.bidPrice) &&
        Objects.equals(this.bidSize, quoteOption.bidSize) &&
        Objects.equals(this.closePrice, quoteOption.closePrice) &&
        Objects.equals(this.delta, quoteOption.delta) &&
        Objects.equals(this.gamma, quoteOption.gamma) &&
        Objects.equals(this.highPrice, quoteOption.highPrice) &&
        Objects.equals(this.indAskPrice, quoteOption.indAskPrice) &&
        Objects.equals(this.indBidPrice, quoteOption.indBidPrice) &&
        Objects.equals(this.indQuoteTime, quoteOption.indQuoteTime) &&
        Objects.equals(this.impliedYield, quoteOption.impliedYield) &&
        Objects.equals(this.lastPrice, quoteOption.lastPrice) &&
        Objects.equals(this.lastSize, quoteOption.lastSize) &&
        Objects.equals(this.lowPrice, quoteOption.lowPrice) &&
        Objects.equals(this.mark, quoteOption.mark) &&
        Objects.equals(this.markChange, quoteOption.markChange) &&
        Objects.equals(this.markPercentChange, quoteOption.markPercentChange) &&
        Objects.equals(this.moneyIntrinsicValue, quoteOption.moneyIntrinsicValue) &&
        Objects.equals(this.netChange, quoteOption.netChange) &&
        Objects.equals(this.netPercentChange, quoteOption.netPercentChange) &&
        Objects.equals(this.openInterest, quoteOption.openInterest) &&
        Objects.equals(this.openPrice, quoteOption.openPrice) &&
        Objects.equals(this.quoteTime, quoteOption.quoteTime) &&
        Objects.equals(this.rho, quoteOption.rho) &&
        Objects.equals(this.securityStatus, quoteOption.securityStatus) &&
        Objects.equals(this.theoreticalOptionValue, quoteOption.theoreticalOptionValue) &&
        Objects.equals(this.theta, quoteOption.theta) &&
        Objects.equals(this.timeValue, quoteOption.timeValue) &&
        Objects.equals(this.totalVolume, quoteOption.totalVolume) &&
        Objects.equals(this.tradeTime, quoteOption.tradeTime) &&
        Objects.equals(this.underlyingPrice, quoteOption.underlyingPrice) &&
        Objects.equals(this.vega, quoteOption.vega) &&
        Objects.equals(this.volatility, quoteOption.volatility);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_52WeekHigh, _52WeekLow, askPrice, askSize, bidPrice, bidSize, closePrice, delta, gamma, highPrice, indAskPrice, indBidPrice, indQuoteTime, impliedYield, lastPrice, lastSize, lowPrice, mark, markChange, markPercentChange, moneyIntrinsicValue, netChange, netPercentChange, openInterest, openPrice, quoteTime, rho, securityStatus, theoreticalOptionValue, theta, timeValue, totalVolume, tradeTime, underlyingPrice, vega, volatility);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuoteOption {\n");
    
    sb.append("    _52WeekHigh: ").append(toIndentedString(_52WeekHigh)).append("\n");
    sb.append("    _52WeekLow: ").append(toIndentedString(_52WeekLow)).append("\n");
    sb.append("    askPrice: ").append(toIndentedString(askPrice)).append("\n");
    sb.append("    askSize: ").append(toIndentedString(askSize)).append("\n");
    sb.append("    bidPrice: ").append(toIndentedString(bidPrice)).append("\n");
    sb.append("    bidSize: ").append(toIndentedString(bidSize)).append("\n");
    sb.append("    closePrice: ").append(toIndentedString(closePrice)).append("\n");
    sb.append("    delta: ").append(toIndentedString(delta)).append("\n");
    sb.append("    gamma: ").append(toIndentedString(gamma)).append("\n");
    sb.append("    highPrice: ").append(toIndentedString(highPrice)).append("\n");
    sb.append("    indAskPrice: ").append(toIndentedString(indAskPrice)).append("\n");
    sb.append("    indBidPrice: ").append(toIndentedString(indBidPrice)).append("\n");
    sb.append("    indQuoteTime: ").append(toIndentedString(indQuoteTime)).append("\n");
    sb.append("    impliedYield: ").append(toIndentedString(impliedYield)).append("\n");
    sb.append("    lastPrice: ").append(toIndentedString(lastPrice)).append("\n");
    sb.append("    lastSize: ").append(toIndentedString(lastSize)).append("\n");
    sb.append("    lowPrice: ").append(toIndentedString(lowPrice)).append("\n");
    sb.append("    mark: ").append(toIndentedString(mark)).append("\n");
    sb.append("    markChange: ").append(toIndentedString(markChange)).append("\n");
    sb.append("    markPercentChange: ").append(toIndentedString(markPercentChange)).append("\n");
    sb.append("    moneyIntrinsicValue: ").append(toIndentedString(moneyIntrinsicValue)).append("\n");
    sb.append("    netChange: ").append(toIndentedString(netChange)).append("\n");
    sb.append("    netPercentChange: ").append(toIndentedString(netPercentChange)).append("\n");
    sb.append("    openInterest: ").append(toIndentedString(openInterest)).append("\n");
    sb.append("    openPrice: ").append(toIndentedString(openPrice)).append("\n");
    sb.append("    quoteTime: ").append(toIndentedString(quoteTime)).append("\n");
    sb.append("    rho: ").append(toIndentedString(rho)).append("\n");
    sb.append("    securityStatus: ").append(toIndentedString(securityStatus)).append("\n");
    sb.append("    theoreticalOptionValue: ").append(toIndentedString(theoreticalOptionValue)).append("\n");
    sb.append("    theta: ").append(toIndentedString(theta)).append("\n");
    sb.append("    timeValue: ").append(toIndentedString(timeValue)).append("\n");
    sb.append("    totalVolume: ").append(toIndentedString(totalVolume)).append("\n");
    sb.append("    tradeTime: ").append(toIndentedString(tradeTime)).append("\n");
    sb.append("    underlyingPrice: ").append(toIndentedString(underlyingPrice)).append("\n");
    sb.append("    vega: ").append(toIndentedString(vega)).append("\n");
    sb.append("    volatility: ").append(toIndentedString(volatility)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
