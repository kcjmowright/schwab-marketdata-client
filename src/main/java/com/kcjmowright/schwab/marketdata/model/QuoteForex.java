/*
 * Market Data
 * Trader API - Market data
 *
 * OpenAPI spec version: 1.0.0
 * Contact: TraderAPI@Schwab.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.kcjmowright.schwab.marketdata.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * Quote data of Forex security
 */
@Schema(description = "Quote data of Forex security")


public class QuoteForex {
  @JsonProperty("52WeekHigh")
  private Double _52WeekHigh = null;

  @JsonProperty("52WeekLow")
  private Double _52WeekLow = null;

  @JsonProperty("askPrice")
  private Double askPrice = null;

  @JsonProperty("askSize")
  private Integer askSize = null;

  @JsonProperty("bidPrice")
  private Double bidPrice = null;

  @JsonProperty("bidSize")
  private Integer bidSize = null;

  @JsonProperty("closePrice")
  private Double closePrice = null;

  @JsonProperty("highPrice")
  private Double highPrice = null;

  @JsonProperty("lastPrice")
  private Double lastPrice = null;

  @JsonProperty("lastSize")
  private Integer lastSize = null;

  @JsonProperty("lowPrice")
  private Double lowPrice = null;

  @JsonProperty("mark")
  private Double mark = null;

  @JsonProperty("netChange")
  private Double netChange = null;

  @JsonProperty("netPercentChange")
  private Double netPercentChange = null;

  @JsonProperty("openPrice")
  private Double openPrice = null;

  @JsonProperty("quoteTime")
  private Long quoteTime = null;

  @JsonProperty("securityStatus")
  private String securityStatus = null;

  @JsonProperty("tick")
  private Double tick = null;

  @JsonProperty("tickAmount")
  private Double tickAmount = null;

  @JsonProperty("totalVolume")
  private Long totalVolume = null;

  @JsonProperty("tradeTime")
  private Long tradeTime = null;

  public QuoteForex _52WeekHigh(Double _52WeekHigh) {
    this._52WeekHigh = _52WeekHigh;
    return this;
  }

   /**
   * Higest price traded in the past 12 months, or 52 weeks
   * @return _52WeekHigh
  **/
  @Schema(example = "145.09", description = "Higest price traded in the past 12 months, or 52 weeks")
  public Double get52WeekHigh() {
    return _52WeekHigh;
  }

  public void set52WeekHigh(Double _52WeekHigh) {
    this._52WeekHigh = _52WeekHigh;
  }

  public QuoteForex _52WeekLow(Double _52WeekLow) {
    this._52WeekLow = _52WeekLow;
    return this;
  }

   /**
   * Lowest price traded in the past 12 months, or 52 weeks
   * @return _52WeekLow
  **/
  @Schema(example = "77.581", description = "Lowest price traded in the past 12 months, or 52 weeks")
  public Double get52WeekLow() {
    return _52WeekLow;
  }

  public void set52WeekLow(Double _52WeekLow) {
    this._52WeekLow = _52WeekLow;
  }

  public QuoteForex askPrice(Double askPrice) {
    this.askPrice = askPrice;
    return this;
  }

   /**
   * Current Best Ask Price
   * @return askPrice
  **/
  @Schema(example = "124.63", description = "Current Best Ask Price")
  public Double getAskPrice() {
    return askPrice;
  }

  public void setAskPrice(Double askPrice) {
    this.askPrice = askPrice;
  }

  public QuoteForex askSize(Integer askSize) {
    this.askSize = askSize;
    return this;
  }

   /**
   * Number of shares for ask
   * @return askSize
  **/
  @Schema(example = "700", description = "Number of shares for ask")
  public Integer getAskSize() {
    return askSize;
  }

  public void setAskSize(Integer askSize) {
    this.askSize = askSize;
  }

  public QuoteForex bidPrice(Double bidPrice) {
    this.bidPrice = bidPrice;
    return this;
  }

   /**
   * Current Best Bid Price
   * @return bidPrice
  **/
  @Schema(example = "124.6", description = "Current Best Bid Price")
  public Double getBidPrice() {
    return bidPrice;
  }

  public void setBidPrice(Double bidPrice) {
    this.bidPrice = bidPrice;
  }

  public QuoteForex bidSize(Integer bidSize) {
    this.bidSize = bidSize;
    return this;
  }

   /**
   * Number of shares for bid
   * @return bidSize
  **/
  @Schema(example = "300", description = "Number of shares for bid")
  public Integer getBidSize() {
    return bidSize;
  }

  public void setBidSize(Integer bidSize) {
    this.bidSize = bidSize;
  }

  public QuoteForex closePrice(Double closePrice) {
    this.closePrice = closePrice;
    return this;
  }

   /**
   * Previous day&#x27;s closing price
   * @return closePrice
  **/
  @Schema(example = "126.27", description = "Previous day's closing price")
  public Double getClosePrice() {
    return closePrice;
  }

  public void setClosePrice(Double closePrice) {
    this.closePrice = closePrice;
  }

  public QuoteForex highPrice(Double highPrice) {
    this.highPrice = highPrice;
    return this;
  }

   /**
   * Day&#x27;s high trade price
   * @return highPrice
  **/
  @Schema(example = "126.99", description = "Day's high trade price")
  public Double getHighPrice() {
    return highPrice;
  }

  public void setHighPrice(Double highPrice) {
    this.highPrice = highPrice;
  }

  public QuoteForex lastPrice(Double lastPrice) {
    this.lastPrice = lastPrice;
    return this;
  }

   /**
   * Get lastPrice
   * @return lastPrice
  **/
  @Schema(example = "122.3", description = "")
  public Double getLastPrice() {
    return lastPrice;
  }

  public void setLastPrice(Double lastPrice) {
    this.lastPrice = lastPrice;
  }

  public QuoteForex lastSize(Integer lastSize) {
    this.lastSize = lastSize;
    return this;
  }

   /**
   * Number of shares traded with last trade
   * @return lastSize
  **/
  @Schema(example = "100", description = "Number of shares traded with last trade")
  public Integer getLastSize() {
    return lastSize;
  }

  public void setLastSize(Integer lastSize) {
    this.lastSize = lastSize;
  }

  public QuoteForex lowPrice(Double lowPrice) {
    this.lowPrice = lowPrice;
    return this;
  }

   /**
   * Day&#x27;s low trade price
   * @return lowPrice
  **/
  @Schema(example = "52.74", description = "Day's low trade price")
  public Double getLowPrice() {
    return lowPrice;
  }

  public void setLowPrice(Double lowPrice) {
    this.lowPrice = lowPrice;
  }

  public QuoteForex mark(Double mark) {
    this.mark = mark;
    return this;
  }

   /**
   * Mark price
   * @return mark
  **/
  @Schema(example = "52.93", description = "Mark price")
  public Double getMark() {
    return mark;
  }

  public void setMark(Double mark) {
    this.mark = mark;
  }

  public QuoteForex netChange(Double netChange) {
    this.netChange = netChange;
    return this;
  }

   /**
   * Current Last-Prev Close
   * @return netChange
  **/
  @Schema(example = "-0.04", description = "Current Last-Prev Close")
  public Double getNetChange() {
    return netChange;
  }

  public void setNetChange(Double netChange) {
    this.netChange = netChange;
  }

  public QuoteForex netPercentChange(Double netPercentChange) {
    this.netPercentChange = netPercentChange;
    return this;
  }

   /**
   * Net Percentage Change
   * @return netPercentChange
  **/
  @Schema(example = "-0.0756", description = "Net Percentage Change")
  public Double getNetPercentChange() {
    return netPercentChange;
  }

  public void setNetPercentChange(Double netPercentChange) {
    this.netPercentChange = netPercentChange;
  }

  public QuoteForex openPrice(Double openPrice) {
    this.openPrice = openPrice;
    return this;
  }

   /**
   * Price at market open
   * @return openPrice
  **/
  @Schema(example = "52.8", description = "Price at market open")
  public Double getOpenPrice() {
    return openPrice;
  }

  public void setOpenPrice(Double openPrice) {
    this.openPrice = openPrice;
  }

  public QuoteForex quoteTime(Long quoteTime) {
    this.quoteTime = quoteTime;
    return this;
  }

   /**
   * Last quote time in milliseconds since Epoch
   * @return quoteTime
  **/
  @Schema(example = "1621376892336", description = "Last quote time in milliseconds since Epoch")
  public Long getQuoteTime() {
    return quoteTime;
  }

  public void setQuoteTime(Long quoteTime) {
    this.quoteTime = quoteTime;
  }

  public QuoteForex securityStatus(String securityStatus) {
    this.securityStatus = securityStatus;
    return this;
  }

   /**
   * Status of security
   * @return securityStatus
  **/
  @Schema(example = "Normal", description = "Status of security")
  public String getSecurityStatus() {
    return securityStatus;
  }

  public void setSecurityStatus(String securityStatus) {
    this.securityStatus = securityStatus;
  }

  public QuoteForex tick(Double tick) {
    this.tick = tick;
    return this;
  }

   /**
   * Tick Price
   * @return tick
  **/
  @Schema(example = "0", description = "Tick Price")
  public Double getTick() {
    return tick;
  }

  public void setTick(Double tick) {
    this.tick = tick;
  }

  public QuoteForex tickAmount(Double tickAmount) {
    this.tickAmount = tickAmount;
    return this;
  }

   /**
   * Tick Amount
   * @return tickAmount
  **/
  @Schema(example = "0", description = "Tick Amount")
  public Double getTickAmount() {
    return tickAmount;
  }

  public void setTickAmount(Double tickAmount) {
    this.tickAmount = tickAmount;
  }

  public QuoteForex totalVolume(Long totalVolume) {
    this.totalVolume = totalVolume;
    return this;
  }

   /**
   * Aggregated shares traded throughout the day, including pre/post market hours.
   * @return totalVolume
  **/
  @Schema(example = "20171188", description = "Aggregated shares traded throughout the day, including pre/post market hours.")
  public Long getTotalVolume() {
    return totalVolume;
  }

  public void setTotalVolume(Long totalVolume) {
    this.totalVolume = totalVolume;
  }

  public QuoteForex tradeTime(Long tradeTime) {
    this.tradeTime = tradeTime;
    return this;
  }

   /**
   * Last trade time in milliseconds since Epoch
   * @return tradeTime
  **/
  @Schema(example = "1621376731304", description = "Last trade time in milliseconds since Epoch")
  public Long getTradeTime() {
    return tradeTime;
  }

  public void setTradeTime(Long tradeTime) {
    this.tradeTime = tradeTime;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuoteForex quoteForex = (QuoteForex) o;
    return Objects.equals(this._52WeekHigh, quoteForex._52WeekHigh) &&
        Objects.equals(this._52WeekLow, quoteForex._52WeekLow) &&
        Objects.equals(this.askPrice, quoteForex.askPrice) &&
        Objects.equals(this.askSize, quoteForex.askSize) &&
        Objects.equals(this.bidPrice, quoteForex.bidPrice) &&
        Objects.equals(this.bidSize, quoteForex.bidSize) &&
        Objects.equals(this.closePrice, quoteForex.closePrice) &&
        Objects.equals(this.highPrice, quoteForex.highPrice) &&
        Objects.equals(this.lastPrice, quoteForex.lastPrice) &&
        Objects.equals(this.lastSize, quoteForex.lastSize) &&
        Objects.equals(this.lowPrice, quoteForex.lowPrice) &&
        Objects.equals(this.mark, quoteForex.mark) &&
        Objects.equals(this.netChange, quoteForex.netChange) &&
        Objects.equals(this.netPercentChange, quoteForex.netPercentChange) &&
        Objects.equals(this.openPrice, quoteForex.openPrice) &&
        Objects.equals(this.quoteTime, quoteForex.quoteTime) &&
        Objects.equals(this.securityStatus, quoteForex.securityStatus) &&
        Objects.equals(this.tick, quoteForex.tick) &&
        Objects.equals(this.tickAmount, quoteForex.tickAmount) &&
        Objects.equals(this.totalVolume, quoteForex.totalVolume) &&
        Objects.equals(this.tradeTime, quoteForex.tradeTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_52WeekHigh, _52WeekLow, askPrice, askSize, bidPrice, bidSize, closePrice, highPrice, lastPrice, lastSize, lowPrice, mark, netChange, netPercentChange, openPrice, quoteTime, securityStatus, tick, tickAmount, totalVolume, tradeTime);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuoteForex {\n");
    
    sb.append("    _52WeekHigh: ").append(toIndentedString(_52WeekHigh)).append("\n");
    sb.append("    _52WeekLow: ").append(toIndentedString(_52WeekLow)).append("\n");
    sb.append("    askPrice: ").append(toIndentedString(askPrice)).append("\n");
    sb.append("    askSize: ").append(toIndentedString(askSize)).append("\n");
    sb.append("    bidPrice: ").append(toIndentedString(bidPrice)).append("\n");
    sb.append("    bidSize: ").append(toIndentedString(bidSize)).append("\n");
    sb.append("    closePrice: ").append(toIndentedString(closePrice)).append("\n");
    sb.append("    highPrice: ").append(toIndentedString(highPrice)).append("\n");
    sb.append("    lastPrice: ").append(toIndentedString(lastPrice)).append("\n");
    sb.append("    lastSize: ").append(toIndentedString(lastSize)).append("\n");
    sb.append("    lowPrice: ").append(toIndentedString(lowPrice)).append("\n");
    sb.append("    mark: ").append(toIndentedString(mark)).append("\n");
    sb.append("    netChange: ").append(toIndentedString(netChange)).append("\n");
    sb.append("    netPercentChange: ").append(toIndentedString(netPercentChange)).append("\n");
    sb.append("    openPrice: ").append(toIndentedString(openPrice)).append("\n");
    sb.append("    quoteTime: ").append(toIndentedString(quoteTime)).append("\n");
    sb.append("    securityStatus: ").append(toIndentedString(securityStatus)).append("\n");
    sb.append("    tick: ").append(toIndentedString(tick)).append("\n");
    sb.append("    tickAmount: ").append(toIndentedString(tickAmount)).append("\n");
    sb.append("    totalVolume: ").append(toIndentedString(totalVolume)).append("\n");
    sb.append("    tradeTime: ").append(toIndentedString(tradeTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
