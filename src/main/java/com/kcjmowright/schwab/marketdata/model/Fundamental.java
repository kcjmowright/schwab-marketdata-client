/*
 * Market Data
 * Trader API - Market data
 *
 * OpenAPI spec version: 1.0.0
 * Contact: TraderAPI@Schwab.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.kcjmowright.schwab.marketdata.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.kcjmowright.schwab.marketdata.model.DivFreq;
import com.kcjmowright.schwab.marketdata.model.FundStrategy;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.OffsetDateTime;
/**
 * Fundamentals of a security
 */
@Schema(description = "Fundamentals of a security")


public class Fundamental {
  @JsonProperty("avg10DaysVolume")
  private Double avg10DaysVolume = null;

  @JsonProperty("avg1YearVolume")
  private Double avg1YearVolume = null;

  @JsonProperty("declarationDate")
  private OffsetDateTime declarationDate = null;

  @JsonProperty("divAmount")
  private Double divAmount = null;

  @JsonProperty("divExDate")
  private String divExDate = null;

  @JsonProperty("divFreq")
  private DivFreq divFreq = null;

  @JsonProperty("divPayAmount")
  private Double divPayAmount = null;

  @JsonProperty("divPayDate")
  private OffsetDateTime divPayDate = null;

  @JsonProperty("divYield")
  private Double divYield = null;

  @JsonProperty("eps")
  private Double eps = null;

  @JsonProperty("fundLeverageFactor")
  private Double fundLeverageFactor = null;

  @JsonProperty("fundStrategy")
  private FundStrategy fundStrategy = null;

  @JsonProperty("nextDivExDate")
  private OffsetDateTime nextDivExDate = null;

  @JsonProperty("nextDivPayDate")
  private OffsetDateTime nextDivPayDate = null;

  @JsonProperty("peRatio")
  private Double peRatio = null;

  public Fundamental avg10DaysVolume(Double avg10DaysVolume) {
    this.avg10DaysVolume = avg10DaysVolume;
    return this;
  }

   /**
   * Average 10 day volume
   * @return avg10DaysVolume
  **/
  @Schema(description = "Average 10 day volume")
  public Double getAvg10DaysVolume() {
    return avg10DaysVolume;
  }

  public void setAvg10DaysVolume(Double avg10DaysVolume) {
    this.avg10DaysVolume = avg10DaysVolume;
  }

  public Fundamental avg1YearVolume(Double avg1YearVolume) {
    this.avg1YearVolume = avg1YearVolume;
    return this;
  }

   /**
   * Average 1 day volume
   * @return avg1YearVolume
  **/
  @Schema(description = "Average 1 day volume")
  public Double getAvg1YearVolume() {
    return avg1YearVolume;
  }

  public void setAvg1YearVolume(Double avg1YearVolume) {
    this.avg1YearVolume = avg1YearVolume;
  }

  public Fundamental declarationDate(OffsetDateTime declarationDate) {
    this.declarationDate = declarationDate;
    return this;
  }

   /**
   * Declaration date in yyyy-mm-ddThh:mm:ssZ
   * @return declarationDate
  **/
  @Schema(example = "2021-04-28T00:00Z", description = "Declaration date in yyyy-mm-ddThh:mm:ssZ")
  public OffsetDateTime getDeclarationDate() {
    return declarationDate;
  }

  public void setDeclarationDate(OffsetDateTime declarationDate) {
    this.declarationDate = declarationDate;
  }

  public Fundamental divAmount(Double divAmount) {
    this.divAmount = divAmount;
    return this;
  }

   /**
   * Dividend Amount
   * @return divAmount
  **/
  @Schema(example = "0.88", description = "Dividend Amount")
  public Double getDivAmount() {
    return divAmount;
  }

  public void setDivAmount(Double divAmount) {
    this.divAmount = divAmount;
  }

  public Fundamental divExDate(String divExDate) {
    this.divExDate = divExDate;
    return this;
  }

   /**
   * Dividend date in yyyy-mm-ddThh:mm:ssZ
   * @return divExDate
  **/
  @Schema(example = "2021-05-07T00:00:00Z", description = "Dividend date in yyyy-mm-ddThh:mm:ssZ")
  public String getDivExDate() {
    return divExDate;
  }

  public void setDivExDate(String divExDate) {
    this.divExDate = divExDate;
  }

  public Fundamental divFreq(DivFreq divFreq) {
    this.divFreq = divFreq;
    return this;
  }

   /**
   * Get divFreq
   * @return divFreq
  **/
  @Schema(description = "")
  public DivFreq getDivFreq() {
    return divFreq;
  }

  public void setDivFreq(DivFreq divFreq) {
    this.divFreq = divFreq;
  }

  public Fundamental divPayAmount(Double divPayAmount) {
    this.divPayAmount = divPayAmount;
    return this;
  }

   /**
   * Dividend Pay Amount
   * @return divPayAmount
  **/
  @Schema(example = "0.22", description = "Dividend Pay Amount")
  public Double getDivPayAmount() {
    return divPayAmount;
  }

  public void setDivPayAmount(Double divPayAmount) {
    this.divPayAmount = divPayAmount;
  }

  public Fundamental divPayDate(OffsetDateTime divPayDate) {
    this.divPayDate = divPayDate;
    return this;
  }

   /**
   * Dividend pay date in yyyy-mm-ddThh:mm:ssZ
   * @return divPayDate
  **/
  @Schema(example = "2021-05-13T00:00Z", description = "Dividend pay date in yyyy-mm-ddThh:mm:ssZ")
  public OffsetDateTime getDivPayDate() {
    return divPayDate;
  }

  public void setDivPayDate(OffsetDateTime divPayDate) {
    this.divPayDate = divPayDate;
  }

  public Fundamental divYield(Double divYield) {
    this.divYield = divYield;
    return this;
  }

   /**
   * Dividend yield
   * @return divYield
  **/
  @Schema(example = "0.7", description = "Dividend yield")
  public Double getDivYield() {
    return divYield;
  }

  public void setDivYield(Double divYield) {
    this.divYield = divYield;
  }

  public Fundamental eps(Double eps) {
    this.eps = eps;
    return this;
  }

   /**
   * Earnings per Share
   * @return eps
  **/
  @Schema(example = "4.45645", description = "Earnings per Share")
  public Double getEps() {
    return eps;
  }

  public void setEps(Double eps) {
    this.eps = eps;
  }

  public Fundamental fundLeverageFactor(Double fundLeverageFactor) {
    this.fundLeverageFactor = fundLeverageFactor;
    return this;
  }

   /**
   * Fund Leverage Factor + &gt; 0 &lt;-
   * @return fundLeverageFactor
  **/
  @Schema(example = "-1", description = "Fund Leverage Factor + > 0 <-")
  public Double getFundLeverageFactor() {
    return fundLeverageFactor;
  }

  public void setFundLeverageFactor(Double fundLeverageFactor) {
    this.fundLeverageFactor = fundLeverageFactor;
  }

  public Fundamental fundStrategy(FundStrategy fundStrategy) {
    this.fundStrategy = fundStrategy;
    return this;
  }

   /**
   * Get fundStrategy
   * @return fundStrategy
  **/
  @Schema(description = "")
  public FundStrategy getFundStrategy() {
    return fundStrategy;
  }

  public void setFundStrategy(FundStrategy fundStrategy) {
    this.fundStrategy = fundStrategy;
  }

  public Fundamental nextDivExDate(OffsetDateTime nextDivExDate) {
    this.nextDivExDate = nextDivExDate;
    return this;
  }

   /**
   * Next Dividend date
   * @return nextDivExDate
  **/
  @Schema(example = "2021-02-12T00:00Z", description = "Next Dividend date")
  public OffsetDateTime getNextDivExDate() {
    return nextDivExDate;
  }

  public void setNextDivExDate(OffsetDateTime nextDivExDate) {
    this.nextDivExDate = nextDivExDate;
  }

  public Fundamental nextDivPayDate(OffsetDateTime nextDivPayDate) {
    this.nextDivPayDate = nextDivPayDate;
    return this;
  }

   /**
   * Next Dividend pay date
   * @return nextDivPayDate
  **/
  @Schema(example = "2021-02-12T00:00Z", description = "Next Dividend pay date")
  public OffsetDateTime getNextDivPayDate() {
    return nextDivPayDate;
  }

  public void setNextDivPayDate(OffsetDateTime nextDivPayDate) {
    this.nextDivPayDate = nextDivPayDate;
  }

  public Fundamental peRatio(Double peRatio) {
    this.peRatio = peRatio;
    return this;
  }

   /**
   * P/E Ratio
   * @return peRatio
  **/
  @Schema(example = "28.599", description = "P/E Ratio")
  public Double getPeRatio() {
    return peRatio;
  }

  public void setPeRatio(Double peRatio) {
    this.peRatio = peRatio;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Fundamental fundamental = (Fundamental) o;
    return Objects.equals(this.avg10DaysVolume, fundamental.avg10DaysVolume) &&
        Objects.equals(this.avg1YearVolume, fundamental.avg1YearVolume) &&
        Objects.equals(this.declarationDate, fundamental.declarationDate) &&
        Objects.equals(this.divAmount, fundamental.divAmount) &&
        Objects.equals(this.divExDate, fundamental.divExDate) &&
        Objects.equals(this.divFreq, fundamental.divFreq) &&
        Objects.equals(this.divPayAmount, fundamental.divPayAmount) &&
        Objects.equals(this.divPayDate, fundamental.divPayDate) &&
        Objects.equals(this.divYield, fundamental.divYield) &&
        Objects.equals(this.eps, fundamental.eps) &&
        Objects.equals(this.fundLeverageFactor, fundamental.fundLeverageFactor) &&
        Objects.equals(this.fundStrategy, fundamental.fundStrategy) &&
        Objects.equals(this.nextDivExDate, fundamental.nextDivExDate) &&
        Objects.equals(this.nextDivPayDate, fundamental.nextDivPayDate) &&
        Objects.equals(this.peRatio, fundamental.peRatio);
  }

  @Override
  public int hashCode() {
    return Objects.hash(avg10DaysVolume, avg1YearVolume, declarationDate, divAmount, divExDate, divFreq, divPayAmount, divPayDate, divYield, eps, fundLeverageFactor, fundStrategy, nextDivExDate, nextDivPayDate, peRatio);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Fundamental {\n");
    
    sb.append("    avg10DaysVolume: ").append(toIndentedString(avg10DaysVolume)).append("\n");
    sb.append("    avg1YearVolume: ").append(toIndentedString(avg1YearVolume)).append("\n");
    sb.append("    declarationDate: ").append(toIndentedString(declarationDate)).append("\n");
    sb.append("    divAmount: ").append(toIndentedString(divAmount)).append("\n");
    sb.append("    divExDate: ").append(toIndentedString(divExDate)).append("\n");
    sb.append("    divFreq: ").append(toIndentedString(divFreq)).append("\n");
    sb.append("    divPayAmount: ").append(toIndentedString(divPayAmount)).append("\n");
    sb.append("    divPayDate: ").append(toIndentedString(divPayDate)).append("\n");
    sb.append("    divYield: ").append(toIndentedString(divYield)).append("\n");
    sb.append("    eps: ").append(toIndentedString(eps)).append("\n");
    sb.append("    fundLeverageFactor: ").append(toIndentedString(fundLeverageFactor)).append("\n");
    sb.append("    fundStrategy: ").append(toIndentedString(fundStrategy)).append("\n");
    sb.append("    nextDivExDate: ").append(toIndentedString(nextDivExDate)).append("\n");
    sb.append("    nextDivPayDate: ").append(toIndentedString(nextDivPayDate)).append("\n");
    sb.append("    peRatio: ").append(toIndentedString(peRatio)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
