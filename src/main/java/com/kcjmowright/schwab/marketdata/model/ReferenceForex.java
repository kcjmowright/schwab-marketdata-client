/*
 * Market Data
 * Trader API - Market data
 *
 * OpenAPI spec version: 1.0.0
 * Contact: TraderAPI@Schwab.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.kcjmowright.schwab.marketdata.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * Reference data of Forex security
 */
@Schema(description = "Reference data of Forex security")


public class ReferenceForex {
  @JsonProperty("description")
  private String description = null;

  @JsonProperty("exchange")
  private String exchange = null;

  @JsonProperty("exchangeName")
  private String exchangeName = null;

  @JsonProperty("isTradable")
  private Boolean isTradable = null;

  @JsonProperty("marketMaker")
  private String marketMaker = null;

  @JsonProperty("product")
  private String product = null;

  @JsonProperty("tradingHours")
  private String tradingHours = null;

  public ReferenceForex description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description of Instrument
   * @return description
  **/
  @Schema(example = "Euro/USDollar Spot", description = "Description of Instrument")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public ReferenceForex exchange(String exchange) {
    this.exchange = exchange;
    return this;
  }

   /**
   * Exchange Code
   * @return exchange
  **/
  @Schema(example = "q", description = "Exchange Code")
  public String getExchange() {
    return exchange;
  }

  public void setExchange(String exchange) {
    this.exchange = exchange;
  }

  public ReferenceForex exchangeName(String exchangeName) {
    this.exchangeName = exchangeName;
    return this;
  }

   /**
   * Exchange Name
   * @return exchangeName
  **/
  @Schema(description = "Exchange Name")
  public String getExchangeName() {
    return exchangeName;
  }

  public void setExchangeName(String exchangeName) {
    this.exchangeName = exchangeName;
  }

  public ReferenceForex isTradable(Boolean isTradable) {
    this.isTradable = isTradable;
    return this;
  }

   /**
   * is FOREX tradable
   * @return isTradable
  **/
  @Schema(example = "true", description = "is FOREX tradable")
  public Boolean isIsTradable() {
    return isTradable;
  }

  public void setIsTradable(Boolean isTradable) {
    this.isTradable = isTradable;
  }

  public ReferenceForex marketMaker(String marketMaker) {
    this.marketMaker = marketMaker;
    return this;
  }

   /**
   * Market marker
   * @return marketMaker
  **/
  @Schema(description = "Market marker")
  public String getMarketMaker() {
    return marketMaker;
  }

  public void setMarketMaker(String marketMaker) {
    this.marketMaker = marketMaker;
  }

  public ReferenceForex product(String product) {
    this.product = product;
    return this;
  }

   /**
   * Product name
   * @return product
  **/
  @Schema(description = "Product name")
  public String getProduct() {
    return product;
  }

  public void setProduct(String product) {
    this.product = product;
  }

  public ReferenceForex tradingHours(String tradingHours) {
    this.tradingHours = tradingHours;
    return this;
  }

   /**
   * Trading hours
   * @return tradingHours
  **/
  @Schema(description = "Trading hours")
  public String getTradingHours() {
    return tradingHours;
  }

  public void setTradingHours(String tradingHours) {
    this.tradingHours = tradingHours;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReferenceForex referenceForex = (ReferenceForex) o;
    return Objects.equals(this.description, referenceForex.description) &&
        Objects.equals(this.exchange, referenceForex.exchange) &&
        Objects.equals(this.exchangeName, referenceForex.exchangeName) &&
        Objects.equals(this.isTradable, referenceForex.isTradable) &&
        Objects.equals(this.marketMaker, referenceForex.marketMaker) &&
        Objects.equals(this.product, referenceForex.product) &&
        Objects.equals(this.tradingHours, referenceForex.tradingHours);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, exchange, exchangeName, isTradable, marketMaker, product, tradingHours);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReferenceForex {\n");
    
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    exchange: ").append(toIndentedString(exchange)).append("\n");
    sb.append("    exchangeName: ").append(toIndentedString(exchangeName)).append("\n");
    sb.append("    isTradable: ").append(toIndentedString(isTradable)).append("\n");
    sb.append("    marketMaker: ").append(toIndentedString(marketMaker)).append("\n");
    sb.append("    product: ").append(toIndentedString(product)).append("\n");
    sb.append("    tradingHours: ").append(toIndentedString(tradingHours)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
