/*
 * Market Data
 * Trader API - Market data
 *
 * OpenAPI spec version: 1.0.0
 * Contact: TraderAPI@Schwab.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.kcjmowright.schwab.marketdata.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.kcjmowright.schwab.marketdata.model.ErrorSource;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.UUID;
/**
 * Error
 */



public class Error {
  @JsonProperty("id")
  private UUID id = null;

  /**
   * The HTTP status code .
   */
  public enum StatusEnum {
    _400("400"),
    _401("401"),
    _404("404"),
    _500("500");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static StatusEnum fromValue(String input) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("status")
  private StatusEnum status = null;

  @JsonProperty("title")
  private String title = null;

  @JsonProperty("detail")
  private String detail = null;

  @JsonProperty("source")
  private ErrorSource source = null;

   /**
   * Unique error id.
   * @return id
  **/
  @Schema(example = "9821320c-8500-4edf-bd46-a9299c13d2e0", description = "Unique error id.")
  public UUID getId() {
    return id;
  }

   /**
   * The HTTP status code .
   * @return status
  **/
  @Schema(example = "400", description = "The HTTP status code .")
  public StatusEnum getStatus() {
    return status;
  }

   /**
   * Short error description.
   * @return title
  **/
  @Schema(example = "Missing header", description = "Short error description.")
  public String getTitle() {
    return title;
  }

   /**
   * Detailed error description.
   * @return detail
  **/
  @Schema(example = "Search combination should not exceed 500.", description = "Detailed error description.")
  public String getDetail() {
    return detail;
  }

  public Error source(ErrorSource source) {
    this.source = source;
    return this;
  }

   /**
   * Get source
   * @return source
  **/
  @Schema(description = "")
  public ErrorSource getSource() {
    return source;
  }

  public void setSource(ErrorSource source) {
    this.source = source;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Error error = (Error) o;
    return Objects.equals(this.id, error.id) &&
        Objects.equals(this.status, error.status) &&
        Objects.equals(this.title, error.title) &&
        Objects.equals(this.detail, error.detail) &&
        Objects.equals(this.source, error.source);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, status, title, detail, source);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Error {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    detail: ").append(toIndentedString(detail)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
