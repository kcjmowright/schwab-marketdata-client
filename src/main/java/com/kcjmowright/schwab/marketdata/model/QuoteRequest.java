/*
 * Market Data
 * Trader API - Market data
 *
 * OpenAPI spec version: 1.0.0
 * Contact: TraderAPI@Schwab.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.kcjmowright.schwab.marketdata.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * Request one or more quote data in POST body
 */
@Schema(description = "Request one or more quote data in POST body")


public class QuoteRequest {
  @JsonProperty("cusips")
  private List<String> cusips = null;

  @JsonProperty("fields")
  private String fields = null;

  @JsonProperty("ssids")
  private List<Long> ssids = null;

  @JsonProperty("symbols")
  private List<String> symbols = null;

  @JsonProperty("realtime")
  private Boolean realtime = null;

  @JsonProperty("indicative")
  private Boolean indicative = null;

  public QuoteRequest cusips(List<String> cusips) {
    this.cusips = cusips;
    return this;
  }

  public QuoteRequest addCusipsItem(String cusipsItem) {
    if (this.cusips == null) {
      this.cusips = new ArrayList<>();
    }
    this.cusips.add(cusipsItem);
    return this;
  }

   /**
   * List of cusip, max of 500 of symbols+cusip+ssids
   * @return cusips
  **/
  @Schema(example = "[808524680,594918104]", description = "List of cusip, max of 500 of symbols+cusip+ssids")
  public List<String> getCusips() {
    return cusips;
  }

  public void setCusips(List<String> cusips) {
    this.cusips = cusips;
  }

  public QuoteRequest fields(String fields) {
    this.fields = fields;
    return this;
  }

   /**
   * comma separated list of nodes in each quote&lt;br/&gt; possible values are quote,fundamental,reference,extended,regular. Dont send this attribute for full response.
   * @return fields
  **/
  @Schema(example = "quote,reference", description = "comma separated list of nodes in each quote<br/> possible values are quote,fundamental,reference,extended,regular. Dont send this attribute for full response.")
  public String getFields() {
    return fields;
  }

  public void setFields(String fields) {
    this.fields = fields;
  }

  public QuoteRequest ssids(List<Long> ssids) {
    this.ssids = ssids;
    return this;
  }

  public QuoteRequest addSsidsItem(Long ssidsItem) {
    if (this.ssids == null) {
      this.ssids = new ArrayList<>();
    }
    this.ssids.add(ssidsItem);
    return this;
  }

   /**
   * List of Schwab securityid[SSID], max of 500 of symbols+cusip+ssids
   * @return ssids
  **/
  @Schema(example = "[1516105793,34621523]", description = "List of Schwab securityid[SSID], max of 500 of symbols+cusip+ssids")
  public List<Long> getSsids() {
    return ssids;
  }

  public void setSsids(List<Long> ssids) {
    this.ssids = ssids;
  }

  public QuoteRequest symbols(List<String> symbols) {
    this.symbols = symbols;
    return this;
  }

  public QuoteRequest addSymbolsItem(String symbolsItem) {
    if (this.symbols == null) {
      this.symbols = new ArrayList<>();
    }
    this.symbols.add(symbolsItem);
    return this;
  }

   /**
   * List of symbols, max of 500 of symbols+cusip+ssids
   * @return symbols
  **/
  @Schema(example = "[\"MRAD\",\"EATOF\",\"EBIZ\",\"AAPL\",\"BAC\",\"AAAHX\",\"AAAIX\",\"$DJI\",\"$SPX\",\"MVEN\",\"SOBS\",\"TOITF\",\"CNSWF\",\"AMZN  230317C01360000\",\"DJX   231215C00290000\",\"/ESH23\",\"./ADUF23C0.55\",\"AUD/CAD\"]", description = "List of symbols, max of 500 of symbols+cusip+ssids")
  public List<String> getSymbols() {
    return symbols;
  }

  public void setSymbols(List<String> symbols) {
    this.symbols = symbols;
  }

  public QuoteRequest realtime(Boolean realtime) {
    this.realtime = realtime;
    return this;
  }

   /**
   * Get realtime quotes and skip entitlement check
   * @return realtime
  **/
  @Schema(example = "true", description = "Get realtime quotes and skip entitlement check")
  public Boolean isRealtime() {
    return realtime;
  }

  public void setRealtime(Boolean realtime) {
    this.realtime = realtime;
  }

  public QuoteRequest indicative(Boolean indicative) {
    this.indicative = indicative;
    return this;
  }

   /**
   * Include indicative symbol quotes for all ETF symbols in request. If ETF symbol ABC is in request and indicative&#x3D;true API will return quotes for ABC and its corresponding indicative quote for $ABC.IV
   * @return indicative
  **/
  @Schema(example = "true", description = "Include indicative symbol quotes for all ETF symbols in request. If ETF symbol ABC is in request and indicative=true API will return quotes for ABC and its corresponding indicative quote for $ABC.IV")
  public Boolean isIndicative() {
    return indicative;
  }

  public void setIndicative(Boolean indicative) {
    this.indicative = indicative;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuoteRequest quoteRequest = (QuoteRequest) o;
    return Objects.equals(this.cusips, quoteRequest.cusips) &&
        Objects.equals(this.fields, quoteRequest.fields) &&
        Objects.equals(this.ssids, quoteRequest.ssids) &&
        Objects.equals(this.symbols, quoteRequest.symbols) &&
        Objects.equals(this.realtime, quoteRequest.realtime) &&
        Objects.equals(this.indicative, quoteRequest.indicative);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cusips, fields, ssids, symbols, realtime, indicative);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuoteRequest {\n");
    
    sb.append("    cusips: ").append(toIndentedString(cusips)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    ssids: ").append(toIndentedString(ssids)).append("\n");
    sb.append("    symbols: ").append(toIndentedString(symbols)).append("\n");
    sb.append("    realtime: ").append(toIndentedString(realtime)).append("\n");
    sb.append("    indicative: ").append(toIndentedString(indicative)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
